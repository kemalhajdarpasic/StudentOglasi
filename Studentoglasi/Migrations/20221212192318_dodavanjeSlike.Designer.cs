// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentOglasi.Data;

#nullable disable

namespace StudentOglasi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221212192318_dodavanjeSlike")]
    partial class dodavanjeSlike
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudentOglasi.Models.Fakultet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniverzitetID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UniverzitetID");

                    b.ToTable("Fakultet");
                });

            modelBuilder.Entity("StudentOglasi.Models.Firma", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradID")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GradID");

                    b.ToTable("Firma");
                });

            modelBuilder.Entity("StudentOglasi.Models.Grad", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Grad");
                });

            modelBuilder.Entity("StudentOglasi.Models.Kategorija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Kategorija");
                });

            modelBuilder.Entity("StudentOglasi.Models.Komentar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int>("ObajvaID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VrijemeObjave")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("KorisnikID");

                    b.HasIndex("ObajvaID");

                    b.ToTable("Komentar");
                });

            modelBuilder.Entity("StudentOglasi.Models.Korisnik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Korisnik");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("StudentOglasi.Models.Objava", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("KategorijaID")
                        .HasColumnType("int");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferentFakultetaID")
                        .HasColumnType("int");

                    b.Property<int?>("ReferentUniverzitetaID")
                        .HasColumnType("int");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slika")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UposlenikFirmeID")
                        .HasColumnType("int");

                    b.Property<int?>("UposlenikStipenditoraID")
                        .HasColumnType("int");

                    b.Property<DateTime>("VrijemeObjave")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("KategorijaID");

                    b.HasIndex("ReferentFakultetaID");

                    b.HasIndex("ReferentUniverzitetaID");

                    b.HasIndex("UposlenikFirmeID");

                    b.HasIndex("UposlenikStipenditoraID");

                    b.ToTable("Objava");
                });

            modelBuilder.Entity("StudentOglasi.Models.Ocjena", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("FakultetID")
                        .HasColumnType("int");

                    b.Property<int?>("FirmaID")
                        .HasColumnType("int");

                    b.Property<int?>("SmjestajID")
                        .HasColumnType("int");

                    b.Property<int?>("StipenditorID")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("UniverzitetID")
                        .HasColumnType("int");

                    b.Property<int>("Vrijednost")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FakultetID");

                    b.HasIndex("FirmaID");

                    b.HasIndex("SmjestajID");

                    b.HasIndex("StipenditorID");

                    b.HasIndex("StudentId");

                    b.HasIndex("UniverzitetID");

                    b.ToTable("Ocjena");
                });

            modelBuilder.Entity("StudentOglasi.Models.Oglas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RokPrijave")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slika")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VrijemeObjave")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Oglas");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("StudentOglasi.Models.PrijavaPraksa", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("PraksaId")
                        .HasColumnType("int");

                    b.Property<string>("CV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Certifikati")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropratnoPismo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "PraksaId");

                    b.HasIndex("PraksaId");

                    b.ToTable("PrijavaPraksa");
                });

            modelBuilder.Entity("StudentOglasi.Models.PrijavaStipendija", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("StipendijaID")
                        .HasColumnType("int");

                    b.Property<string>("CV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dokumentacija")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProsjekOcjena")
                        .HasColumnType("float");

                    b.HasKey("StudentId", "StipendijaID");

                    b.HasIndex("StipendijaID");

                    b.ToTable("PrijavaStipendija");
                });

            modelBuilder.Entity("StudentOglasi.Models.Rezervacija", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SmjestajId")
                        .HasColumnType("int");

                    b.Property<int>("BrojOsoba")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumOdjave")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumPrijave")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentId", "SmjestajId");

                    b.HasIndex("SmjestajId");

                    b.ToTable("Rezervacija");
                });

            modelBuilder.Entity("StudentOglasi.Models.Stipenditor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradID")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipUstanove")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GradID");

                    b.ToTable("Stipenditor");
                });

            modelBuilder.Entity("StudentOglasi.Models.Univerzitet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradID")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GradID");

                    b.ToTable("Univerzitet");
                });

            modelBuilder.Entity("StudentOglasi.Models.Administrator", b =>
                {
                    b.HasBaseType("StudentOglasi.Models.Korisnik");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Administrator");
                });

            modelBuilder.Entity("StudentOglasi.Models.IzdavacSmjestaja", b =>
                {
                    b.HasBaseType("StudentOglasi.Models.Korisnik");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("IzdavacSmjestaja");
                });

            modelBuilder.Entity("StudentOglasi.Models.ReferentFakulteta", b =>
                {
                    b.HasBaseType("StudentOglasi.Models.Korisnik");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FakultetID")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FakultetID");

                    b.ToTable("ReferentFakulteta");
                });

            modelBuilder.Entity("StudentOglasi.Models.ReferentUniverziteta", b =>
                {
                    b.HasBaseType("StudentOglasi.Models.Korisnik");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnivetzitetID")
                        .HasColumnType("int");

                    b.HasIndex("UnivetzitetID");

                    b.ToTable("ReferentUniverziteta");
                });

            modelBuilder.Entity("StudentOglasi.Models.Student", b =>
                {
                    b.HasBaseType("StudentOglasi.Models.Korisnik");

                    b.Property<string>("BrojIndeksa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FakultetID")
                        .HasColumnType("int");

                    b.Property<int>("GodinaStudija")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NacinStudiranja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FakultetID");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("StudentOglasi.Models.UposlenikFirme", b =>
                {
                    b.HasBaseType("StudentOglasi.Models.Korisnik");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FirmaID")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pozicija")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FirmaID");

                    b.ToTable("UposlenikFirme");
                });

            modelBuilder.Entity("StudentOglasi.Models.UposlenikStipenditora", b =>
                {
                    b.HasBaseType("StudentOglasi.Models.Korisnik");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StipenditorID")
                        .HasColumnType("int");

                    b.HasIndex("StipenditorID");

                    b.ToTable("UposlenikStipenditora");
                });

            modelBuilder.Entity("StudentOglasi.Models.Praksa", b =>
                {
                    b.HasBaseType("StudentOglasi.Models.Oglas");

                    b.Property<string>("Benefiti")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kvalifikacije")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Placena")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Trajanje")
                        .HasColumnType("datetime2");

                    b.Property<int>("UposlenikID")
                        .HasColumnType("int");

                    b.HasIndex("UposlenikID");

                    b.ToTable("Praksa");
                });

            modelBuilder.Entity("StudentOglasi.Models.Smjestaj", b =>
                {
                    b.HasBaseType("StudentOglasi.Models.Oglas");

                    b.Property<int>("BrojSoba")
                        .HasColumnType("int");

                    b.Property<string>("Cijena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DodatneUsluge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradID")
                        .HasColumnType("int");

                    b.Property<int>("IzdavacID")
                        .HasColumnType("int");

                    b.Property<int>("Kapacitet")
                        .HasColumnType("int");

                    b.Property<string>("NacinGrijanja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Parking")
                        .HasColumnType("bit");

                    b.HasIndex("GradID");

                    b.HasIndex("IzdavacID");

                    b.ToTable("Smjestaj");
                });

            modelBuilder.Entity("StudentOglasi.Models.Stipendija", b =>
                {
                    b.HasBaseType("StudentOglasi.Models.Oglas");

                    b.Property<int>("BrojStipendisata")
                        .HasColumnType("int");

                    b.Property<string>("Iznos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Izvor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kriterij")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NivoObrazovanja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PotrebnaDokumentacija")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UposlenikID")
                        .HasColumnType("int");

                    b.Property<string>("Uslovi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("UposlenikID");

                    b.ToTable("Stipendija");
                });

            modelBuilder.Entity("StudentOglasi.Models.Fakultet", b =>
                {
                    b.HasOne("StudentOglasi.Models.Univerzitet", "Univerzitet")
                        .WithMany()
                        .HasForeignKey("UniverzitetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Univerzitet");
                });

            modelBuilder.Entity("StudentOglasi.Models.Firma", b =>
                {
                    b.HasOne("StudentOglasi.Models.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("StudentOglasi.Models.Komentar", b =>
                {
                    b.HasOne("StudentOglasi.Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOglasi.Models.Objava", "Objava")
                        .WithMany()
                        .HasForeignKey("ObajvaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Objava");
                });

            modelBuilder.Entity("StudentOglasi.Models.Objava", b =>
                {
                    b.HasOne("StudentOglasi.Models.Kategorija", "Kategorija")
                        .WithMany()
                        .HasForeignKey("KategorijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOglasi.Models.ReferentFakulteta", null)
                        .WithMany("Objave")
                        .HasForeignKey("ReferentFakultetaID");

                    b.HasOne("StudentOglasi.Models.ReferentUniverziteta", null)
                        .WithMany("Objave")
                        .HasForeignKey("ReferentUniverzitetaID");

                    b.HasOne("StudentOglasi.Models.UposlenikFirme", null)
                        .WithMany("Objave")
                        .HasForeignKey("UposlenikFirmeID");

                    b.HasOne("StudentOglasi.Models.UposlenikStipenditora", null)
                        .WithMany("Objave")
                        .HasForeignKey("UposlenikStipenditoraID");

                    b.Navigation("Kategorija");
                });

            modelBuilder.Entity("StudentOglasi.Models.Ocjena", b =>
                {
                    b.HasOne("StudentOglasi.Models.Fakultet", null)
                        .WithMany("Ocjene")
                        .HasForeignKey("FakultetID");

                    b.HasOne("StudentOglasi.Models.Firma", null)
                        .WithMany("Ocjene")
                        .HasForeignKey("FirmaID");

                    b.HasOne("StudentOglasi.Models.Smjestaj", null)
                        .WithMany("Ocjene")
                        .HasForeignKey("SmjestajID");

                    b.HasOne("StudentOglasi.Models.Stipenditor", null)
                        .WithMany("Ocjene")
                        .HasForeignKey("StipenditorID");

                    b.HasOne("StudentOglasi.Models.Student", "Student")
                        .WithMany("OcjenaSmjestaja")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOglasi.Models.Univerzitet", null)
                        .WithMany("Ocjene")
                        .HasForeignKey("UniverzitetID");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentOglasi.Models.PrijavaPraksa", b =>
                {
                    b.HasOne("StudentOglasi.Models.Praksa", "Praksa")
                        .WithMany("Prijave")
                        .HasForeignKey("PraksaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOglasi.Models.Student", "Student")
                        .WithMany("PrijavePrakse")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Praksa");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentOglasi.Models.PrijavaStipendija", b =>
                {
                    b.HasOne("StudentOglasi.Models.Stipendija", "Stipendija")
                        .WithMany("Prijave")
                        .HasForeignKey("StipendijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOglasi.Models.Student", "Student")
                        .WithMany("PrijaveStipendije")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stipendija");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentOglasi.Models.Rezervacija", b =>
                {
                    b.HasOne("StudentOglasi.Models.Smjestaj", "Smjestaj")
                        .WithMany("Rezervacije")
                        .HasForeignKey("SmjestajId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOglasi.Models.Student", "Student")
                        .WithMany("Rezervacije")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Smjestaj");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentOglasi.Models.Stipenditor", b =>
                {
                    b.HasOne("StudentOglasi.Models.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("StudentOglasi.Models.Univerzitet", b =>
                {
                    b.HasOne("StudentOglasi.Models.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("StudentOglasi.Models.Administrator", b =>
                {
                    b.HasOne("StudentOglasi.Models.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("StudentOglasi.Models.Administrator", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentOglasi.Models.IzdavacSmjestaja", b =>
                {
                    b.HasOne("StudentOglasi.Models.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("StudentOglasi.Models.IzdavacSmjestaja", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentOglasi.Models.ReferentFakulteta", b =>
                {
                    b.HasOne("StudentOglasi.Models.Fakultet", "Fakultet")
                        .WithMany()
                        .HasForeignKey("FakultetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOglasi.Models.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("StudentOglasi.Models.ReferentFakulteta", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fakultet");
                });

            modelBuilder.Entity("StudentOglasi.Models.ReferentUniverziteta", b =>
                {
                    b.HasOne("StudentOglasi.Models.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("StudentOglasi.Models.ReferentUniverziteta", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOglasi.Models.Univerzitet", "Univerzitet")
                        .WithMany()
                        .HasForeignKey("UnivetzitetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Univerzitet");
                });

            modelBuilder.Entity("StudentOglasi.Models.Student", b =>
                {
                    b.HasOne("StudentOglasi.Models.Fakultet", "Fakultet")
                        .WithMany()
                        .HasForeignKey("FakultetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOglasi.Models.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("StudentOglasi.Models.Student", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fakultet");
                });

            modelBuilder.Entity("StudentOglasi.Models.UposlenikFirme", b =>
                {
                    b.HasOne("StudentOglasi.Models.Firma", "Firma")
                        .WithMany()
                        .HasForeignKey("FirmaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOglasi.Models.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("StudentOglasi.Models.UposlenikFirme", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Firma");
                });

            modelBuilder.Entity("StudentOglasi.Models.UposlenikStipenditora", b =>
                {
                    b.HasOne("StudentOglasi.Models.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("StudentOglasi.Models.UposlenikStipenditora", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOglasi.Models.Stipenditor", "Stipenditor")
                        .WithMany()
                        .HasForeignKey("StipenditorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stipenditor");
                });

            modelBuilder.Entity("StudentOglasi.Models.Praksa", b =>
                {
                    b.HasOne("StudentOglasi.Models.Oglas", null)
                        .WithOne()
                        .HasForeignKey("StudentOglasi.Models.Praksa", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOglasi.Models.UposlenikFirme", "Uposlenik")
                        .WithMany()
                        .HasForeignKey("UposlenikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uposlenik");
                });

            modelBuilder.Entity("StudentOglasi.Models.Smjestaj", b =>
                {
                    b.HasOne("StudentOglasi.Models.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOglasi.Models.Oglas", null)
                        .WithOne()
                        .HasForeignKey("StudentOglasi.Models.Smjestaj", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOglasi.Models.IzdavacSmjestaja", "Izdavac")
                        .WithMany()
                        .HasForeignKey("IzdavacID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grad");

                    b.Navigation("Izdavac");
                });

            modelBuilder.Entity("StudentOglasi.Models.Stipendija", b =>
                {
                    b.HasOne("StudentOglasi.Models.Oglas", null)
                        .WithOne()
                        .HasForeignKey("StudentOglasi.Models.Stipendija", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOglasi.Models.UposlenikStipenditora", "Uposlenik")
                        .WithMany()
                        .HasForeignKey("UposlenikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uposlenik");
                });

            modelBuilder.Entity("StudentOglasi.Models.Fakultet", b =>
                {
                    b.Navigation("Ocjene");
                });

            modelBuilder.Entity("StudentOglasi.Models.Firma", b =>
                {
                    b.Navigation("Ocjene");
                });

            modelBuilder.Entity("StudentOglasi.Models.Stipenditor", b =>
                {
                    b.Navigation("Ocjene");
                });

            modelBuilder.Entity("StudentOglasi.Models.Univerzitet", b =>
                {
                    b.Navigation("Ocjene");
                });

            modelBuilder.Entity("StudentOglasi.Models.ReferentFakulteta", b =>
                {
                    b.Navigation("Objave");
                });

            modelBuilder.Entity("StudentOglasi.Models.ReferentUniverziteta", b =>
                {
                    b.Navigation("Objave");
                });

            modelBuilder.Entity("StudentOglasi.Models.Student", b =>
                {
                    b.Navigation("OcjenaSmjestaja");

                    b.Navigation("PrijavePrakse");

                    b.Navigation("PrijaveStipendije");

                    b.Navigation("Rezervacije");
                });

            modelBuilder.Entity("StudentOglasi.Models.UposlenikFirme", b =>
                {
                    b.Navigation("Objave");
                });

            modelBuilder.Entity("StudentOglasi.Models.UposlenikStipenditora", b =>
                {
                    b.Navigation("Objave");
                });

            modelBuilder.Entity("StudentOglasi.Models.Praksa", b =>
                {
                    b.Navigation("Prijave");
                });

            modelBuilder.Entity("StudentOglasi.Models.Smjestaj", b =>
                {
                    b.Navigation("Ocjene");

                    b.Navigation("Rezervacije");
                });

            modelBuilder.Entity("StudentOglasi.Models.Stipendija", b =>
                {
                    b.Navigation("Prijave");
                });
#pragma warning restore 612, 618
        }
    }
}
